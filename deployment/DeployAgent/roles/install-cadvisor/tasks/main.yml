---
- name : Check Mandatory Variables For Install
  debug:
    msg:
      - ProjectName:{{ projectName | mandatory }}
      - UserName:{{ userName | mandatory }}
      - Sampling Interval:{{ samplingInterval | mandatory }}
      - Agent Type:{{ agentType | mandatory }}
      - License Key:{{ licenseKey | mandatory }}
      - Update APT:{{ apt_update | mandatory }}
- name: SELinux | Check for SELinux
  become: yes
  stat:
    path: /etc/selinux/config
  register: p
- name: SELinux | Disable SELinux
  become: yes
  selinux:
    state: disabled
  when: p.stat.exists == True
- name: Install package dependencies - YUM
  become: yes
  become_flags: '-E'
  package:
    name: "{{item}}"
    state: latest
  with_items:
    - gcc
    - wget
    - libffi-devel
    - python-devel
    - openssl-devel
    - epel-release
    - collectd
  when: ansible_pkg_mgr == 'yum'
- name: Install package dependencies - APT build-essential
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated build-essential python-dev libssl-dev libffi-dev python-pip"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - Add Open SUSE Backports Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr openSUSE_Backports_SLE-12-SP2 && zypper addrepo http://download.opensuse.org/repositories/openSUSE:/Backports:/SLE-12-SP2/standard/openSUSE:Backports:SLE-12-SP2.repo"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Add Open SUSE Server Monitoring Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr server_monitoring && zypper addrepo http://download.opensuse.org/repositories/server:monitoring/SLE_12_SP3/server:monitoring.repo"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Add Open SUSE OSS Repo
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper rr OpenSUSE-12.1-OSS && zypper ar http://download.opensuse.org/distribution/12.1/repo/oss/ OpenSUSE-12.1-OSS"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Refresh Repos
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper --no-gpg-checks refresh"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - Basis-Devel
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper install --auto-agree-with-licenses -y --type pattern Basis-Devel"
  when: ansible_pkg_mgr == 'zypper'
- name: Install package dependencies - python-pip
  become: yes
  shell: "http_proxy={{ http_proxy }} zypper install --auto-agree-with-licenses -y python-pip"
  when: ansible_pkg_mgr == 'zypper'
- name: Check docker installation
  shell: "docker ps"
  register: docker_install
  ignore_errors: True
  changed_when: False
  when: ansible_pkg_mgr == 'apt'
- name: Install docker dependencies
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated apt-transport-https ca-certificates curl software-properties-common"
  when: ansible_pkg_mgr == 'apt' and docker_install|failed
- name: Curl insecure fix
  become: yes
  shell: "echo insecure >> ~/.curlrc"
- name: Receiving docker repo key
  shell: 'https_proxy={{ http_proxy }} curl -sSL https://download.docker.com/linux/$(. /etc/os-release; echo "$ID")/gpg | sudo apt-key add -'
  sudo: true
  when: ansible_pkg_mgr == 'apt' and docker_install|failed
- name: Add docker repo
  shell: 'http_proxy={{ http_proxy }} sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable" && apt-get update'
  sudo: true
  when: ansible_pkg_mgr == 'apt' and docker_install|failed
- name: Install Docker
  shell: 'http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated docker-ce'
  sudo: true
  when: ansible_pkg_mgr == 'apt' and docker_install|failed
- name: Check cadvisor container
  shell: "docker ps -a -f name=cadvisor"
  register: cadvisor
  when: not docker_install|failed
- name: debugging
  debug:
    var: "cadvisor.stdout"
  when: '"cadvisor" not in cadvisor.stdout'
- name: Install cadvisor container
  become: yes
  shell: 'http_proxy={{ http_proxy }} docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --name=cadvisor google/cadvisor:latest'
  when: '"cadvisor" not in cadvisor.stdout and not docker_install|failed'
- name: Delete Old Tar Bundle for Agent
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"
- name: Delete Old Agent Code
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/InsightAgent-master"
- name: Copy Agent Code on Machines
  become: yes
  copy:
    src: ../files/insightagent.tar.gz
    dest: "{{ansible_env.HOME}}"
    owner: root
    group: root
    mode: 0644
- name: Untar the Agent Code
  unarchive:
    src: "{{ansible_env.HOME}}/insightagent.tar.gz"
    dest: "{{ansible_env.HOME}}"
    remote_src: True
- name: Create Python Virtual Environment for Agent
  command: ./deployment/checkpackages.sh -env
  args:
    chdir: "{{ansible_env.HOME}}/InsightAgent-master"
  when: ansible_pkg_mgr != 'zypper'
- name: Download pip packages for Agent
  shell: http_proxy={{ http_proxy }} pip install requests pyyaml pyOpenSSL ndg-httpsclient pyasn1
  when: ansible_pkg_mgr == 'zypper'
- name: Deploy cgroup Agent
  become: true
  shell: "no_proxy={{ no_proxy }} ./deployment/install.sh
    -i {{ projectName }}
    -u {{ userName }}
    -k {{ licenseKey }}
    -s {{ samplingInterval }}
    -t {{ agentType }}
    -w {{ reportingUrl }}"
  become: true
  args:
    chdir: "{{ansible_env.HOME}}/InsightAgent-master/"
- name: Delete Tar Bundle for Agent
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"
