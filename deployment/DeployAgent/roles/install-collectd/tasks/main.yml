---
- name : Check Mandatory Variables For Install
  debug: 
    msg: 
      - ProjectName:{{ projectName | mandatory }} 
      - UserName:{{ userName | mandatory }}
      - Sampling Interval:{{ samplingInterval | mandatory }}
      - Agent Type:{{ agentType | mandatory }}
      - License Key:{{ licenseKey | mandatory }}
      - Update APT:{{ apt_update | mandatory }}
- name: SELinux | Check for SELinux
  become: yes
  stat:
    path: /etc/selinux/config
  register: p
- name: SELinux | Disable SELinux 
  become: yes
  selinux:
    state: disabled
  when: p.stat.exists == True
- name: Install package dependencies - YUM
  become: yes
  become_flags: '-E'
  package: 
    name: "{{item}}" 
    state: latest
  with_items:
    - gcc
    - wget
    - libffi-devel
    - python-devel
    - openssl-devel
    - epel-release
    - collectd
  when: ansible_pkg_mgr == 'yum'
- name: Install package dependencies - APT build-essential
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated build-essential"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT libssl-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated libssl-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT libffi-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated libffi-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT python-dev
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated python-dev"
  when: ansible_pkg_mgr == 'apt'
- name: Install package dependencies - APT collectd
  become: yes
  shell: "http_proxy={{ http_proxy }} apt-get install -y -f --allow-unauthenticated collectd"
  when: ansible_pkg_mgr == 'apt'
- name: Delete Old Tar Bundle for Agent
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"
- name: Delete Old Agent Code
  become: yes
  file:
    state: absent
    path: "{{ansible_env.HOME}}/InsightAgent-master"
- name: Copy Agent Code on Machines
  become: yes
  copy:
    src: ../files/insightagent.tar.gz
    dest: "{{ansible_env.HOME}}"
    owner: root
    group: root
    mode: 0644
- name: Untar the Agent Code
  unarchive: 
    src: "{{ansible_env.HOME}}/insightagent.tar.gz"
    dest: "{{ansible_env.HOME}}"
    remote_src: True
- name: Check for /etc/collectd
  stat: path=/etc/collectd
  register: collectd_dir
- name: Copy collectd configuration file to "/etc/collectd/collectd.conf"
  become: yes
  command: cp -rf {{ansible_env.HOME}}/InsightAgent-master/deployment/DeployAgent/files/collectdsample.conf /etc/collectd/collectd.conf
  when: collectd_dir.stat.exists
- name: Copy collectd configuration file to "/etc/collectd.conf"
  become: yes
  command: cp -rf {{ansible_env.HOME}}/InsightAgent-master/deployment/DeployAgent/files/collectdsample.conf /etc/collectd.conf

- name: Restart collectd
  service:
   name: collectd
   state: restarted
  become: true
- name: Create Python Virtual Environment for Agent
  command: ./deployment/checkpackages.sh -env
  args:
    chdir: "{{ansible_env.HOME}}/InsightAgent-master"
- name: Deploy collectd Agent
  shell: "no_proxy={{ no_proxy }} ./deployment/install.sh 
    -i {{ projectName }} 
    -u {{ userName }} 
    -k {{ licenseKey }} 
    -s {{ samplingInterval }} 
    -t {{ agentType }}
    -w {{ reportingUrl }}"
  become: true
  args:  
    chdir: "{{ansible_env.HOME}}/InsightAgent-master/"
- name: Delete Tar Bundle for Agent
  file:
    state: absent
    path: "{{ansible_env.HOME}}/insightagent.tar.gz"
