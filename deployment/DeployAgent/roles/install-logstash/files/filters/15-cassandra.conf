filter {
    if [fields][log_type] == "cassandra" {
        grok {
            match => { "message" => ["(?<preamble>%{LOGLEVEL:log_level}%{SPACE}(?>\[%{GREEDYDATA:stage}\])) %{TIMESTAMP_ISO8601:timestamp}(?<java>%{SPACE}%{WORD:java_file}\.java\:%{INT:line})%{GREEDYDATA:rest}"] }
        }

        date {
            match => [ "timestamp", "ISO8601" ]
            #target => "ts_event"
        }

        ### set time ###
        ruby { 
            code => "event.set('ts_epoc', event.get('@timestamp').to_i * 1000)" 
        }

        # handle errors
        if "_grokparsefailure" in [tags] or "_dateparsefailure" in [tags] {
            mutate {
                add_field => {
                    "LogStashErrorPool" => "true"
                }
                update => {
                    "message" => "PARSE_ERROR %{message}"
                }
            }
        }

        
        mutate {
            add_field => {
                "instance" => "%{[beat][hostname]}"
                "task_id" => "%{[beat][hostname]}"
                "[msg][tag]" => "%{instance}"
                "[msg][eventId]" => "%{ts_epoc}"
                "[msg][data]" => "%{message}"
                "output_type" => "InsightFinder"
            }
        }

        json_encode {
            source => "msg"
            target => "data"
        }
        
        ### grouping events ###
        aggregate {
            task_id => "%{task_id}-cassandra"
            code => "
		    map['project'] ||= event.get('project')
                    map['output_type'] ||= event.get('output_type')
                    map['size'] ||= 0
                    map['count'] ||= 0
                    map['groupdata'] ||= []
                    map['groupdata'] << event.get('data')
                    map['size'] += (event.get('data').size + 20)
                    map['count'] += 1
                    map_meta.timeout = 0 if map['count'] > 4999 or (map['size'] + 400) > 999999
                    event.cancel()
                    "
            push_previous_map_as_event => false
            push_map_as_event_on_timeout => true
            timeout => 10
        }
    }
}
