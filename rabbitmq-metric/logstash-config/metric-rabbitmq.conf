filter {
  if [agent][type] == "metricbeat" and [event][module] == "rabbitmq" {
    # Initial parse flag
    mutate {
      add_field => {
        "FLAG_DEBUG" => false
        "FLAG_PARSED" => false
      }
    }

    # Set project name
    mutate { update => { "project_name" => "metric_rmq4" } }

    # Set instance name
    mutate { add_field => { "instance_name" => "%{[host][name]}" } }

    # Get epoch
    ruby { code => "event.set('epoch', event.get('@timestamp').to_i * 1000)" }

    # Get sampling interval in second
    ruby { code => "event.set('sampling_interval', event.get('[metricset][period]').to_i / 1000)" }

    if [metricset][name] == "connection" {
      # Metricbeat rabbitmq module provides accumulated sent/received
      # count of connections. This ruby code will get send rate and
      # receive rate by two continuous sent/received count from same
      # connection of same instance.
      ruby {
        init => "
          require 'json'

          # This set collects all connection name
          @connections = Set.new

          @prev_sent = Hash.new { |hash, key| hash[key] = {} }
          @prev_recv = Hash.new { |hash, key| hash[key] = {} }
        "
        code => "
          instance = event.get('instance_name').strip
          interval = event.get('sampling_interval').to_f

          # This offset is added to millisecond timestamp
          # to avoid overwrite by same timestamp and instance
          ts_offset = 0

          connection = event.get('[rabbitmq][connection][name]')

          # Only use the source part as connection name
          connection = connection.match(/(?<src>.*)\s->\s(?<dest>.*)/)['src']

          # Replace any chars which are not allowed by IF API
          connection = connection.gsub(':', ' ')

          # Add current connection to set and use its postion as
          # timestamp offset
          @connections << connection
          ts_offset = @connections.find_index(connection)

          curr_sent = event.get('[rabbitmq][connection][octet_count][sent]')
          curr_recv = event.get('[rabbitmq][connection][octet_count][received]')

          data = {}
          if @prev_sent[instance][connection] and @prev_recv[instance][connection]
            k = 'Connection.SendRate(' + connection + ')' + '[' + instance + ']'
            v = (curr_sent - @prev_sent[instance][connection]) / interval
            data[k] = v.round(2).to_s

            k = 'Connection.ReceiveRate(' + connection + ')' + '[' + instance + ']'
            v = (curr_recv - @prev_recv[instance][connection]) / interval
            data[k] = v.round(2).to_s
          end

          @prev_sent[instance][connection] = curr_sent
          @prev_recv[instance][connection] = curr_recv

          if not data.empty?
            event.set('metric_data', {'timestamp' => (event.get('epoch') + ts_offset).to_s}.merge(data).to_json)
            puts event.get('metric_data')
          end
        "
      }
    }


    # Update parse flag
    if ![project_name] or ![metric_data] {
      mutate { update => { "FLAG_PARSED" => false }}
    } else {
      mutate { update => { "FLAG_PARSED" => true }}
    }
  }
}
