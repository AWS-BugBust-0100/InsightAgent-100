[mssql]
## mssql info
# required
host = localhost
# required
user =
# required
password =
# required
database =

# connection options
timeout =
login_timeout =
appname =
port = 1433
conn_properties =
autocommit =
tds_version =

## get table list info.
# table_list can be from sql, example: `sql:select name from sys.tables`. table_list also can be a list, example: `table1,table2,table3`.
table_list =
# table_whitelist is a regex string used to define which table will be filtered.
table_whitelist =

## get instance and metric id mapping info
instance_map_table =
instance_map_id_field =
instance_map_name_field =

# get device mapping info for different device field, example: field#Table#field_id#field_name,...
device_map_table_info =

# query SQL. Use template filed {{start_time}} or {{end_time}} or {{extract_time}} to replace the time in sql.
sql = """
      SELECT
      *
      FROM
      Table{{extract_time}}
      WHERE Table{{extract_time}}.Time >= {{start_time}} and Table1.Time < {{end_time}};
      """
# the {{start_time}} and {{end_time}} format in sql, as library [arrow]. Example: YYYYMMDD
sql_time_format = YYYYMMDD
# this options will create template field {{extract_time}}, and with offset of {{end_time}}, unit is second. Example: 86400|-86400|0
sql_extract_time_offset = 0
# the {{extract_time}} format in sql, as library [arrow]. Example: YYYYMMDD
sql_extract_time_format = YYYYMMDD

# history data time config. If these options is set, the agent will execute sql by time range and time interval
# time range, Example: 2020-04-13 00:00:00,2020-04-14 00:00:00
sql_time_range = 2020-04-13 00:00:00,2020-04-14 00:00:00
# range interval, unit is second. Example: 86400
sql_time_interval = 86400

# raw, rawtail, csv, csvtail, xls, xlsx, json, jsontail, avro, or xml
# *tail formats keep track of the current file & position + completed files in [state] below
data_format = json

## message parsing
# timestamp format, as library [arrow]. multiple fields can be formatted together to create the timestamp a la `YYYY-MM-DD HH:mm:ss ZZ`. If multiple fields could contain the timestamp, a comma-delimited list may be entered (no value of which may use the aforementioned {formatting}), of which the first found will be selected (treating the list as a priority list). ex `timestamp1,timestamp2`
timestamp_format = epoch
# timezone, as per pytz
timezone = 
timestamp_field = timestamp
# if no instance given, the local hostname will be used. Can also use {field} formatting or a priority list.
instance_field = host
device_field = 
# multiple fields are separated by commas. a field can be named with the syntax `<name>::<value>` or `<name>::==<value>`, where `<name>` and `<value>` can each be either a literal value (`name::value`) or formatted (`total time [{step}]::=={timing.end}-{timing.start}`). Use `::==` as a separator to treat `<value>` as a mathematical formula, which must be parseable by `eval()`.
data_fields =

## proxy
agent_http_proxy =
agent_https_proxy =

[insightfinder]
user_name = 
license_key = 
token =
project_name = 
# metric, metricreplay, log, logreplay, incident, incidentreplay, alert, alertreplay, deployment, deploymentreplay
project_type = metricreplay
sampling_interval = 1
run_interval = 10
# what size to limit chunks sent to IF to, as kb
chunk_size_kb = 2048
if_url = https://app.insightfinder.com
if_http_proxy =
if_https_proxy =
