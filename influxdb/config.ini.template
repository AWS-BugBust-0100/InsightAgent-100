[influxdb]
## influxdb info
# required
host = localhost
# required
username = root
# required
password = root

# connection options
database =
port = 8086
pool_size =
ssl =
verify_ssl =
timeout =
retries =
use_udp =
udp_port =
proxies =
path =
cert =
gzip =
session =

# required. query SQL. Use template filed {{start_time}} or {{end_time}} to replace the time in sql.
sql = """
      select * from cpu where time >= '{{start_time}}' and time < '{{end_time}}';
      """
# required. the {{start_time}} and {{end_time}} format in sql, as library [arrow]. Example: YYYYMMDD
sql_time_format = YYYY-MM-DD HH:mm:ss
# this options will create template field {{extract_time}}, and with offset of {{end_time}}. Example: 86400|-86400|0
sql_extract_time_offset = 0
# the {{extract_time}} format in sql, as library [arrow]. Example: YYYYMMDD
sql_extract_time_format = YYYYMMDD

# history data time config. If these options is set, the agent will execute sql by time range and time interval
# time range, Example: 2020-04-14 00:00:00,2020-04-15 00:00:00
sql_time_range = 2020-03-22 00:00:00,2020-04-29 00:00:00
# range interval, unit is second. Example: 86400
sql_time_interval = 86400

# raw, rawtail, csv, csvtail, xls, xlsx, json, jsontail, avro, or xml
# *tail formats keep track of the current file & position + completed files in [state] below
data_format = json

## message parsing
# timestamp format, as library [arrow]. multiple fields can be formatted together to create the timestamp a la `YYYY-MM-DD HH:mm:ss ZZ`. If multiple fields could contain the timestamp, a comma-delimited list may be entered (no value of which may use the aforementioned {formatting}), of which the first found will be selected (treating the list as a priority list). ex `timestamp1,timestamp2`
timestamp_format =
# timezone, as per pytz
timezone = 
timestamp_field = timestamp
# Timezone of the timestamp data to be sent and stored in target DB (InsightFinder). Default is UTC. Only if you wish the data to be stored in other time zones in InsightFinder, this field should be specified to be the desired time zone.
target_timestamp_timezone = UTC
# if no instance given, the local hostname will be used. Can also use {field} formatting or a priority list.
instance_field = host
device_field = 
# multiple fields are separated by commas. a field can be named with the syntax `<name>::<value>` or `<name>::==<value>`, where `<name>` and `<value>` can each be either a literal value (`name::value`) or formatted (`total time [{step}]::=={timing.end}-{timing.start}`). Use `::==` as a separator to treat `<value>` as a mathematical formula, which must be parseable by `eval()`.
data_fields =

## proxy
agent_http_proxy =
agent_https_proxy =

[insightfinder]
user_name = 
license_key = 
token =
project_name = 
# metric, metricreplay, log, logreplay, incident, incidentreplay, alert, alertreplay, deployment, deploymentreplay
project_type = 
sampling_interval = 1
run_interval = 10
# what size to limit chunks sent to IF to, as kb
chunk_size_kb = 2048
if_url = https://app.insightfinder.com
if_http_proxy =
if_https_proxy =
